#!/bin/sh

# Copyright (c) 2012-2023 Benjamin Althues <benjamin@babab.nl>
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
# this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived from this
# software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
# IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# SPDX-License-Identifier: BSD-3-Clause

VERSIONSTR="Projectpad v1.4.0"
EXECNAME=$(basename "$0")
test -n "$PROJECTPAD_SYMLINK" || PROJECTPAD_SYMLINK=''


# There is no need to share the config and data files of projectpad
umask 077

# Use 'XDF_CONFIG_HOME' environment variable for the base path when found,
# otherwise fall back to 'HOME'
if [ -n "${XDG_CONFIG_HOME}" ]; then
    FILEROOT="${XDG_CONFIG_HOME}/projectpad"
else
    FILEROOT="${HOME}/.projectpad"
fi

# Scan for presence of 'dialog'; exit when not found
if ! DIALOG=$(command -v dialog); then
    echo "Error: Could not find the 'dialog' program"
    exit 1
fi

if [ ! -d "${FILEROOT}" ]; then
    mkdir -p "${FILEROOT}"
fi
if [ ! -f "${FILEROOT}/projects" ]; then
    touch "${FILEROOT}/projects"
fi

if [ -f "${FILEROOT}/projects" ]; then
    PROJECTS="$(cat "${FILEROOT}/projects")"
else
    echo "Error: could not find or create file '${FILEROOT}/projects'"
    exit 2
fi


usage() {
    echo "usage: ${EXECNAME} <command>"
    echo
    echo "Commands:"
    echo "   help    Show this help:"
    echo "   set     Set current project"
    echo '   add     Add PWD to projects and activate path'
    echo '   pwd     Set PWD as active path'
    echo '   edit    Edit project file with EDITOR'
    echo '   update  Recursively scan PWD for git directories and append any'
    echo "           found directories to the project file"
    echo "   gitto   Register all projects with gitto"
    echo "   name    Get current project name"
    echo "   get     Get current project path"
    echo "   version Show version information"
}

editnotice() {
    echo "File '${FILEROOT}/projects' is empty."
    echo
    echo "Run '${EXECNAME} update' to recursively and all git-versioned"
    echo "directories found in the current working directory. You can edit"
    echo "the projectfile (afterwards) by using '${EXECNAME} edit'"
    echo
    echo "It should contains entries like:"
    echo
    echo "${HOME}/path/to/projects/project_1    project_1"
    echo "${HOME}/path/to/projects/project_2    project_2"
}

choice() {
    if [ -n "${PROJECTS}" ]; then
        ${DIALOG} \
            --backtitle "${VERSIONSTR}" \
            --cancel-label "Exit" \
            --menu "Project list" 0 0 0 "$PROJECTS" \
            2> "${FILEROOT}/current"
    else
        editnotice
        exit 1
    fi
}

edit_with_editor() {
        if [ -z "${EDITOR}" ]; then
            echo "Error: environment var '\$EDITOR' is not set"
            exit 2
        fi
        ${EDITOR} "${FILEROOT}/projects"
}

update() {
    dirs="$(find . -type d -exec test -d "{}/.git" \; -prune -print)"
    for dir in ${dirs}; do
        new=$(echo "${dir}" | sed -e "s|^\.|${PWD}|" -e "s|${HOME}|~|")
        file="${file}${new}   $(basename "${new}")\n"
    done
    printf '\n%s' "${file}" | sort -k 2 >> "${FILEROOT}/projects"
}

add_pwd() {
    echo "$PWD" > "${FILEROOT}/current"
    printf '%s   ' "$PWD" | sed "s|${HOME}|~|" > "${FILEROOT}/projects"
    basename "$PWD" >> "${FILEROOT}/projects"
    echo "${PROJECTS}" >> "${FILEROOT}/projects"
}

register_with_gitto() {
    # Scan for presence of 'gitto'; exit when not found
    if ! GITTO=$(command -v gitto); then
        echo "Error: Could not find the 'gitto' program"
        exit 1
    fi

    _ppaths=$(echo "${PROJECTS}" | awk '{ print $1 }' | sed "s|~|${HOME}|")
    for proj in ${_ppaths}; do
        if [ "$("${GITTO}" check "${proj}")" = "Repository is not registered" ]
        then
            "${GITTO}" add "${proj}"
        fi
    done
}

_prune_path() {
    strippath=$(echo "$1 " | sed "s|${HOME}|~|")
    echo "${PROJECTS}" | grep -v "${strippath}" > "${FILEROOT}/projects"
    PROJECTS="$(cat "${FILEROOT}/projects")"
}

_get_name() {
    if [ -f "${FILEROOT}/current" ]; then
        PROJECT=$(cat "${FILEROOT}/current")
        basename "${PROJECT}"
    else
        echo none
    fi
}

_symlink() {
    # must return a status code
    if test -n "${PROJECTPAD_SYMLINK}" && test "$(_get_name)" != 'none'; then
        if ! ln -sfnr "$(sed "s|~|${HOME}|" "${FILEROOT}/current")" \
            "${PROJECTPAD_SYMLINK}"
        then
            echo projecpad error: could not create symlink
            return 1
        fi
    fi
    return 0
}


case "$1" in
    "help")
        usage
        ;;
    "set")
        choice
        _symlink && clear
        ;;
    "get")
        if [ -f "${FILEROOT}/current" ]; then
            PROJECT="$(sed "s|~|${HOME}|" "${FILEROOT}/current")"
        else
            echo "${HOME}"
            exit 2
        fi
        if [ -d "${PROJECT}" ]; then
            echo "${PROJECT}"
        else
            echo "${HOME}"
            exit 2
        fi
        ;;
    "name")
        _get_name
        ;;
    "edit")
        edit_with_editor
        ;;
    "update")
        update
        ;;
    "add")
        _prune_path "$PWD"
        add_pwd
        _symlink
        ;;
    "gitto")
        register_with_gitto
        ;;
    "pwd")
        echo "$PWD" > "${FILEROOT}/current"
        _symlink
        ;;
    "version")
        echo "${VERSIONSTR} - https://github.com/babab/projectpad"
        ;;
    *)
        usage
        if [ -z "${PROJECTS}" ]; then
            echo
            echo "------------------------------------------------------------"
            echo
            editnotice
        fi
        exit
        ;;
esac
