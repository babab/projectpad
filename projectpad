#!/bin/sh

# Copyright (c) 2012-2014 Benjamin Althues <benjamin@babab.nl>
#
# Permission to use, copy, modify, and distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
# ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
# OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

VERSIONSTR="Projectpad v1.2.0"
EXECNAME=$(basename "$0")

# Use 'XDF_CONFIG_HOME' environment variable for the base path when found,
# otherwise fall back to 'HOME'
if [ -n "${XDG_CONFIG_HOME}" ]; then
    FILEROOT="${XDG_CONFIG_HOME}/projectpad"
else
    FILEROOT="${HOME}/.projectpad"
fi

# Scan for presence of 'dialog'; exit when not found
DIALOG=$(which dialog)
if [ $? -gt 0 ]; then
    echo "Error: Could not find the 'dialog' program"
    exit 1
fi

if [ ! -d "${FILEROOT}" ]; then
    mkdir -p "${FILEROOT}"
fi
if [ ! -f "${FILEROOT}/projects" ]; then
    touch "${FILEROOT}/projects"
fi

if [ -f "${FILEROOT}/projects" ]; then
    PROJECTS="$(cat ${FILEROOT}/projects)"
else
    echo "Error: could not find file '${FILEROOT}/projects'"
    exit 2
fi

# Check for correct usage of echo command for support on both *BSD and Linux
ECHOCMD='echo -e'
${ECHOCMD} > /dev/null 2>&1
if [ $? -gt 0 ]; then
    ECHOCMD='echo'
fi

usage()
{
    echo "usage: ${EXECNAME} <command>"
    echo
    echo "Commands:"
    echo "   help    Show this help:"
    echo "   edit    Edit project file with \$EDITOR"
    echo "   get     Get current project path"
    echo "   name    Get current project name"
    echo "   set     Set current project"
    echo "   update  Recursively scan PWD for git directories and append any"
    echo "           found directories to the project file, immediately"
    echo "           editing it afterwards"
    echo "   gitto   Register all projects with gitto"
    echo "   pwd     Set current PWD as active project"
}

editnotice()
{
    echo "File '${FILEROOT}/projects' is empty."
    echo
    echo "Run '${EXECNAME} update' to recursively add all git-versioned"
    echo "directories found in the current working directory. You can edit"
    echo "the projectfile (afterwards) by using '${EXECNAME} edit'"
    echo
    echo "It should contains entries like:"
    echo
    echo "${HOME}/path/to/projects/project_1    project_1"
    echo "${HOME}/path/to/projects/project_2    project_2"
}

choice()
{
    if [ -n "${PROJECTS}" ]; then
        ${DIALOG} \
            --backtitle "${VERSIONSTR}" \
            --cancel-label "Exit" \
            --menu "Project list" 0 0 0 $PROJECTS \
            2> "${FILEROOT}/current"
    else
        editnotice
        exit 1
    fi
}

edit_with_editor()
{
        if [ -z "${EDITOR}" ]; then
            echo "Error: environment var '\$EDITOR' is not set"
            exit 2
        fi
        ${EDITOR} "${FILEROOT}/projects"
}

update()
{
    dirs="$(find -type d -exec test -d "{}/.git" \; -prune -print)"
    for dir in ${dirs}; do
        new=$(echo "${dir}" | sed -e "s|^\.|${PWD}|" -e "s|${HOME}|~|")
        file="${file}${new}\t\t"$(basename "${new}")"\n"
    done
    ${ECHOCMD} "\n${file}" >> "${FILEROOT}/projects"
    edit_with_editor
}

register_with_gitto()
{
    # Scan for presence of 'gitto'; exit when not found
    GITTO=$(which gitto)
    if [ $? -gt 0 ]; then
        echo "Error: Could not find the 'gitto' program"
        exit 1
    fi

    project_paths=$(echo "${PROJECTS}" | awk '{ print $1 }' | sed "s|~|${HOME}|")
    for proj in ${project_paths}; do
        if [ "$(${GITTO} check ${proj})" == "Repository is not registered" ]
        then
            ${GITTO} add ${proj}
        fi
    done
}


case "$1" in
    "help")
        usage
        ;;
    "set")
        choice
        clear
        ;;
    "get")
        if [ -f "${FILEROOT}/current" ]; then
            PROJECT=$(cat "${FILEROOT}/current" | sed "s|~|${HOME}|")
        else
            echo "${HOME}"
            exit 2
        fi
        if [ -d "${PROJECT}" ]; then
            echo "${PROJECT}"
        else
            echo "${HOME}"
            exit 2
        fi
        ;;
    "name")
        if [ -f "${FILEROOT}/current" ]; then
            PROJECT=$(cat "${FILEROOT}/current")
            echo $(basename "${PROJECT}")
        else
            echo none
        fi
        ;;
    "edit")
        edit_with_editor
        ;;
    "update")
        update
        ;;
    "gitto")
        register_with_gitto
        ;;
    "pwd")
        echo $PWD > ${FILEROOT}/current
        ;;
    *)
        usage
        if [ ! -n "${PROJECTS}" ]; then
            echo
            echo "------------------------------------------------------------"
            echo
            editnotice
        fi
        exit
        ;;
esac
